{
	"version": 5,
	"name": "kyc",
	"type": "kyc",
	"author": "bitHolla",
	"bio": "Know your customers by allow them to input their information and admin can view and approve or reject the documents",
	"description": "Allows users to upload documents and input identity info.",
	"documentation": null,
	"logo": "https://bitholla.s3.ap-northeast-2.amazonaws.com/plugins/kyc-thumbnail.png",
	"icon": "https://bitholla.s3.ap-northeast-2.amazonaws.com/plugins/kyc-icon.png",
	"url": null,
	"meta": {
		"region": null,
		"bucketName": null,
		"accessKeyId": null,
		"secretAccessKey": null
	},
	"public_meta": {},
	"prescript": {
		"run": null,
		"install": [
			"aws-sdk",
			"awesome-phonenumber"
		]
	},
	"postscript": {
		"run": null
	},
	"script": "\"use strict\";const{installedLibraries:installedLibraries,multer:multer,meta:meta,app:app,toolsLib:toolsLib,expressValidator:expressValidator,lodash:lodash,loggerPlugin:loggerPlugin,moment:moment}=this,aws=installedLibraries[\"aws-sdk\"],PhoneNumber=installedLibraries[\"awesome-phonenumber\"],upload=multer(),VERIFY_STATUS={EMPTY:0,PENDING:1,REJECTED:2,COMPLETED:3},s3=()=>(aws.config.update({accessKeyId:meta.accessKeyId,secretAccessKey:meta.secretAccessKey}),new aws.S3({region:meta.region,signatureVersion:\"v4\"})),uploadFile=(e,s)=>new Promise((r,i)=>{const o={Bucket:meta.bucketName,Key:e,Body:s.buffer,ContentType:s.mimetype,ACL:\"authenticated-read\"};s3().upload(o,(e,s)=>{e&&i(e),r(s)})}),getKeyFromLink=e=>{const s=e.indexOf(\"amazonaws.com/\");return s>0?e.substring(s+\"amazonaws.com/\".length):e},getPublicLink=e=>{const s={Bucket:meta.bucketName,Key:getKeyFromLink(e),Expires:300};return s3().getSignedUrl(\"getObject\",s)},validMimeType=(e=\"\")=>0===e.indexOf(\"image/\"),getType=(e=\"\")=>e.replace(\"image/\",\"\");app.put(\"/plugins/kyc/user\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"user\"]),expressValidator.checkSchema({full_name:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0},gender:{in:[\"body\"],errorMessage:\"must be a boolean\",isBoolean:!0,optional:!0},nationality:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0},dob:{in:[\"body\"],errorMessage:\"must be a string\",isISO8601:!0,optional:!0},address:{in:[\"body\"],custom:{options:e=>!!lodash.isPlainObject(e)&&(!(!e.country||!lodash.isString(e.country))&&(!(!e.address||!lodash.isString(e.address))&&(!(!e.postal_code||!lodash.isString(e.postal_code))&&!(!e.country||!lodash.isString(e.country)))))},errorMessage:\"must be an object with country, address, postal_code, country (all string)\",optional:!0}})],(e,s)=>{const r=expressValidator.validationResult(e);if(!r.isEmpty())return s.status(400).json({errors:r.array()});loggerPlugin.verbose(e.uuid,\"PUT /plugins/kyc/user auth\",e.auth.sub);const i=e.body,{email:o}=e.auth.sub;toolsLib.user.getUserByEmail(o,!1).then(async e=>{if(!e)throw new Error(\"User not found\");const r=lodash.pick(i,[\"full_name\",\"gender\",\"dob\",\"address\",\"nationality\"]);let o=await e.update(r,{fields:[\"full_name\",\"gender\",\"nationality\",\"dob\",\"address\"],returning:!0});return o=lodash.omit(o.dataValues,[\"password\",\"is_admin\",\"is_support\",\"is_kyc\",\"is_supervisor\"]),s.json(o)}).catch(r=>(loggerPlugin.error(e.uuid,\"PUT /plugins/kyc/user err\",r.message),s.status(r.status||400).json({message:r.message})))}),app.put(\"/plugins/kyc/admin\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"admin\",\"supervisor\",\"support\"]),expressValidator.checkSchema({user_id:{in:[\"query\"],errorMessage:\"must be an integer\",isInt:!0,optional:!1},full_name:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0},gender:{in:[\"body\"],errorMessage:\"must be a boolean\",isBoolean:!0,optional:!0},nationality:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0},dob:{in:[\"body\"],errorMessage:\"must be a string\",isISO8601:!0,optional:!0},address:{in:[\"body\"],custom:{options:e=>!!lodash.isPlainObject(e)&&(!(!e.country||!lodash.isString(e.country))&&(!(!e.address||!lodash.isString(e.address))&&(!(!e.postal_code||!lodash.isString(e.postal_code))&&!(!e.country||!lodash.isString(e.country)))))},errorMessage:\"must be an object with country, address, postal_code, country (all string)\",optional:!0},phone_number:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0}})],(e,s)=>{const r=expressValidator.validationResult(e);if(!r.isEmpty())return s.status(400).json({errors:r.array()});loggerPlugin.verbose(e.uuid,\"PUT /plugins/kyc/admin auth\",e.auth.sub);const i=e.headers[\"x-real-ip\"],o=e.headers[\"x-real-origin\"],t=e.auth.sub.id,a=e.query.user_id,n=e.body;toolsLib.user.getUserByKitId(a,!1).then(e=>{if(!e)throw new Error(\"User not found\");const s=lodash.cloneDeep(e.dataValues);if(n.phone_number){const e=new PhoneNumber(n.phone_number);if(!e.isValid())throw new Error(\"Invalid phone number given\");n.phone_number=e.getNumber()}const r=lodash.pick(n,[\"full_name\",\"gender\",\"dob\",\"address\",\"nationality\",\"phone_number\"]);return Promise.all([e.update(r,{fields:[\"full_name\",\"gender\",\"dob\",\"address\",\"nationality\",\"phone_number\"],returning:!0}),s])}).then(async([e,r])=>(await toolsLib.user.createAudit(t,\"userUpdate\",i,{userId:e.id,prevUserData:r,newUserDate:e,domain:o}),e=lodash.omit(e.dataValues,[\"password\",\"is_admin\",\"is_support\",\"is_kyc\",\"is_supervisor\"]),s.json(e))).catch(r=>(loggerPlugin.error(e.uuid,\"PUT /plugins/kyc/user err\",r.message),s.status(r.status||400).json({message:r.message})))}),app.get(\"/plugins/kyc/admin/files\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"admin\",\"supervisor\",\"support\",\"kyc\"]),expressValidator.checkSchema({user_id:{in:[\"query\"],errorMessage:\"must be an integer\",isInt:!0,optional:!0},email:{in:[\"query\"],errorMessage:\"must be an email\",isEmail:!0,optional:!0}})],(e,s)=>{const r=expressValidator.validationResult(e);if(!r.isEmpty())return s.status(400).json({errors:r.array()});loggerPlugin.verbose(e.uuid,\"GET /plugins/kyc/id auth\",e.auth.sub);const{email:i,user_id:o}=e.query,t={};if(o)t.id=o;else{if(!i)return loggerPlugin.error(e.uuid,\"GET /plugins/kyc/admin/files\",\"Email or id required\"),s.status(400).json({message:\"Email or id required\"});t.email=i}toolsLib.database.findOne(\"user\",{where:t,attributes:[\"id\",\"id_data\"],raw:!0}).then(e=>{if(!e)throw new Error(\"User not found\");return toolsLib.database.findOne(\"verification image\",{where:{user_id:e.id},order:[[\"created_at\",\"desc\"]],attributes:[\"front\",\"back\",\"proof_of_residency\"],raw:!0})}).then(e=>{if(!e)throw new Error(\"ID image not found\");const r={front:e.front?getPublicLink(e.front):\"\",back:e.back?getPublicLink(e.back):\"\",proof_of_residency:e.proof_of_residency?getPublicLink(e.proof_of_residency):\"\"};return s.json(r)}).catch(r=>(loggerPlugin.error(e.uuid,\"GET /plugins/kyc/admin/files err\",r.message),s.status(r.status||400).json({message:r.message})))}),app.post(\"/plugins/kyc/verify\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"admin\",\"supervisor\",\"support\",\"kyc\"]),expressValidator.checkSchema({user_id:{in:[\"body\"],errorMessage:\"must be an integer\",isInt:!0,optional:!1},message:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0}})],(e,s)=>{const r=expressValidator.validationResult(e);if(!r.isEmpty())return s.status(400).json({errors:r.array()});loggerPlugin.verbose(e.uuid,\"POST /plugins/kyc/verify auth\",e.auth.sub);const{user_id:i,message:o}=e.body;loggerPlugin.info(e.uuid,\"POST /plugins/kyc/verify user_id\",i),toolsLib.user.getUserByKitId(i,!1).then(e=>{if(!e)throw new Error(\"User not found\");if(e.id_data.status===VERIFY_STATUS.COMPLETED)throw new Error(\"ID already verified\");return e.update({id_data:{...e.id_data,status:VERIFY_STATUS.COMPLETED,note:o}},{fields:[\"id_data\"],returning:!0})}).then(e=>s.json(e.id_data)).catch(r=>(loggerPlugin.error(e.uuid,\"POST /plugins/kyc/verify err\",r.message),s.status(r.status||400).json({message:r.message})))}),app.post(\"/plugins/kyc/revoke\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"admin\",\"supervisor\",\"support\",\"kyc\"]),expressValidator.checkSchema({user_id:{in:[\"body\"],errorMessage:\"must be an integer\",isInt:!0,optional:!1},message:{in:[\"body\"],errorMessage:\"must be a string\",isString:!0,isLength:{errorMessage:\"must be minimum length of 1\",options:{min:1}},optional:!0}})],(e,s)=>{const r=expressValidator.validationResult(e);if(!r.isEmpty())return s.status(400).json({errors:r.array()});loggerPlugin.verbose(e.uuid,\"POST /plugins/kyc/revoke auth\",e.auth.sub);const i=e.body.user_id,o=e.body.message||\"Unspecified\";loggerPlugin.info(e.uuid,\"POST /plugins/kyc/revoke user_id\",i),toolsLib.user.getUserByKitId(i,!1).then(e=>{if(!e)throw new Error(\"User not found\");if(e.id_data.status===VERIFY_STATUS.REJECTED)throw new Error(\"ID already revoked\");return toolsLib.database.getModel(\"sequelize\").transaction(s=>Promise.all([e.update({id_data:{...e.id_data,status:VERIFY_STATUS.REJECTED,note:o}},{fields:[\"id_data\"],returning:!0,transaction:s}),toolsLib.database.destroy(\"verification image\",{where:{user_id:e.id}},{transaction:s})]))}).then(([e])=>{const r={type:\"id\",message:o};return toolsLib.sendEmail(\"USER_VERIFICATION_REJECT\",e.email,r,e.settings),s.json(e.id_data)}).catch(r=>(loggerPlugin.error(e.uuid,\"POST /plugins/kyc/revoke err\",r.message),s.status(r.status||400).json({message:r.message})))}),app.post(\"/plugins/kyc/user/upload\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"user\"]),upload.fields([{name:\"front\",maxCount:1},{name:\"back\",maxCount:1},{name:\"proof_of_residency\",maxCount:1}])],(e,s)=>{loggerPlugin.verbose(e.uuid,\"POST /plugins/kyc/user/upload auth\",e.auth.sub);const{id:r}=e.auth.sub;let{front:i,back:o,proof_of_residency:t}=e.files;i&&(i=i[0]),o&&(o=o[0]),t&&(t=t[0]);const{...a}=e.body;let n=\"\";if(validMimeType(i.mimetype)?o&&!validMimeType(o.mimetype)?n=\"back\":t&&!validMimeType(t.mimetype)&&(n=\"proof_of_residency\"):n=\"front\",n)return loggerPlugin.error(e.uuid,\"POST /plugins/kyc/user/upload error\",`Invalid type: ${n} field`),s.status(400).json({message:`Invalid type: ${n} field`});const u={id_data:{}};Object.entries(a).forEach(([e,s])=>{s&&(\"type\"!==e&&\"number\"!==e&&\"issued_date\"!==e&&\"expiration_date\"!==e||(u.id_data[e]=s))});const d=moment().valueOf();let l;toolsLib.user.getUserByKitId(r,!1).then(e=>{if(!e)throw new Error(\"User not found\");l=e;let{status:s}=e.id_data||0;if(s===VERIFY_STATUS.COMPLETED)throw new Error(\"You are not allowed to upload an approved document\");return Promise.all([uploadFile(`${r}/${d}-front.${getType(i.mimetype)}`,i),o?uploadFile(`${r}/${d}-back.${getType(o.mimetype)}`,o):void 0,t?uploadFile(`${r}/${d}-proof_of_residency.${getType(t.mimetype)}`,t):void 0])}).then(s=>(loggerPlugin.info(e.uuid,\"POST /plugins/kyc/user/upload results\",s),toolsLib.database.getModel(\"sequelize\").transaction(e=>toolsLib.database.getModel(\"verification image\").findOrCreate({defaults:{user_id:l.id,front:s[0].Location,back:s[1]?s[1].Location:\"\",proof_of_residency:s[2]?s[2].Location:\"\"},where:{user_id:l.id},transaction:e}).then(async([r,i])=>{i||await r.update({front:s[0].Location,back:s[1]?s[1].Location:\"\",proof_of_residency:s[2]?s[2].Location:\"\"},{transaction:e,fields:[\"front\",\"back\",\"proof_of_residency\"]}),u.id_data.status=VERIFY_STATUS.PENDING,await l.update(u,{transaction:e,fields:[\"id_data\"]})})))).then(()=>(toolsLib.sendEmail(\"USER_VERIFICATION\",l.email,{},l.settings),s.json({message:\"Success\"}))).catch(r=>{loggerPlugin.error(e.uuid,\"POST /plugins/kyc/user/upload error\",r.message),s.status(400).json({message:r.message})})}),app.post(\"/plugins/kyc/admin/upload\",[toolsLib.security.verifyBearerTokenExpressMiddleware([\"admin\",\"supervisor\"]),upload.fields([{name:\"front\",maxCount:1},{name:\"back\",maxCount:1},{name:\"proof_of_residency\",maxCount:1}])],(e,s)=>{loggerPlugin.verbose(e.uuid,\"POST /plugins/kyc/admin/upload auth\",e.auth.sub);let{front:r,back:i,proof_of_residency:o}=e.files;r&&(r=r[0]),i&&(i=i[0]),o&&(o=o[0]);const{...t}=e.body,a=e.query.user_id;if(loggerPlugin.info(e.uuid,\"POST /plugins/kyc/admin/upload user_id\",a),!r&&!i&&!o&&0===Object.keys(t).length)return loggerPlugin.error(e.uuid,\"POST /plugins/kyc/admin/upload err\",\"Missing fields\"),s.status(400).json({message:\"Missing fields\"});let n=\"\";if(r&&!validMimeType(r.mimetype)?n=\"front\":i&&!validMimeType(i.mimetype)?n=\"back\":o&&!validMimeType(o.mimetype)&&(n=\"proof_of_residency\"),n)return loggerPlugin.error(e.uuid,\"POST /plugins/kyc/admin/upload err\",`Invalid type ${n} field`),s.status(400).json({message:`Invalid type ${n} field`});const u={id_data:{provided:!0}};Object.entries(t).forEach(([e,s])=>{s&&(\"type\"!==e&&\"number\"!==e&&\"issued_date\"!==e&&\"expiration_date\"!==e||(u.id_data[e]=s))});const d=moment().valueOf();let l;toolsLib.user.getUserByKitId(a,!1).then(e=>{if(!e)throw new Error(\"User not found\");return l=e,toolsLib.database.findOne(\"verification image\",{where:{user_id:e.id},order:[[\"created_at\",\"desc\"]],attributes:[\"front\",\"back\",\"proof_of_residency\"],raw:!0})}).then(e=>e||{front:void 0,back:void 0,proof_of_residency:void 0}).then(e=>Promise.all([r?uploadFile(`${a}/${d}-front.${getType(r.mimetype)}`,r):{Location:e.front},i?uploadFile(`${a}/${d}-back.${getType(i.mimetype)}`,i):{Location:e.back},o?uploadFile(`${a}/${d}-proof_of_residency.${getType(o.mimetype)}`,o):{Location:e.proof_of_residency}])).then(s=>(loggerPlugin.info(e.uuid,\"POST /plugins/kyc/admin/upload results\",s),toolsLib.database.getModel(\"sequelize\").transaction(e=>toolsLib.database.getModel(\"verification image\").findOrCreate({defaults:{user_id:l.id,front:s[0].Location,back:s[1]?s[1].Location:\"\",proof_of_residency:s[2]?s[2].Location:\"\"},where:{user_id:l.id},transaction:e}).then(async([r,i])=>{let o=r;return i||(o=await r.update({front:s[0].Location,back:s[1]?s[1].Location:\"\",proof_of_residency:s[2]?s[2].Location:\"\"},{transaction:e,fields:[\"front\",\"back\",\"proof_of_residency\"],returning:!0})),u.id_data.status=VERIFY_STATUS.COMPLETED,await l.update(u,{transaction:e,fields:[\"id_data\"]}),o})))).then(e=>(e.front=e.front?getPublicLink(e.front):e.front,e.back=e.back?getPublicLink(e.back):e.back,e.proof_of_residency=e.proof_of_residency?getPublicLink(e.proof_of_residency):e.proof_of_residency,s.json({message:\"Success\",data:e}))).catch(e=>(loggerPlugin.error(\"POST /plugins/kyc/admin/upload err\",e.message),s.status(e.status||400).json({message:e.message})))});",
	"admin_view": null,
	"web_view": [
		{
			"src": "https://bitholla.s3.ap-northeast-2.amazonaws.com/scripts/plugins/kyc/v5/kyc__home.js",
			"meta": {
				"strings": {
					"en": {}
				},
				"icons": {
					"dark": {}
				}
			},
			"target": "REMOTE_COMPONENT__KYC_VERIFICATION_HOME",
			"is_default": true
		},
		{
			"src": "https://bitholla.s3.ap-northeast-2.amazonaws.com/scripts/plugins/kyc/v5/kyc__verification.js",
			"target": "REMOTE_COMPONENT__KYC_VERIFICATION",
			"meta": {},
			"is_default": true
		}
	]
}